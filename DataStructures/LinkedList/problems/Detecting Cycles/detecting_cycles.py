# -*- coding: utf-8 -*-
"""Detecting Cycles.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XJBRltSdVnAyNILUZiRBNOuOgLirSXTw

Problem: Detect if a linked list contains a cycle.

Explanation: The fast pointer moves two steps at a time and the slow pointer moves one step at a time. If they meet, a cycle exists.


---


Time Complexity: O(n)

Space Complexity: O(1)
"""

def has_cycle(head):
    slow = fast = head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            return True
    return False