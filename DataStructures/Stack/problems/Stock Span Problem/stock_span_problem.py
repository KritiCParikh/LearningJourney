# -*- coding: utf-8 -*-
"""Stock Span Problem

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XJBRltSdVnAyNILUZiRBNOuOgLirSXTw

Problem: Find the span of stock prices for each day.

Solution: Use a stack to keep track of previous prices and their indices. (Code example not provided here, but it can be solved by iterating over the array and using a stack to track the indices of previous days.)

- **Time Complexity**: O(n)
- **Space Complexity**: O(n)

- **Explanation**: We iterate through the stock prices once (O(n)), using a stack to track indices of previous prices. Each element is pushed and popped from the stack at most once, leading to an O(n) time complexity. The stack requires O(n) space to store the indices.
"""

def stock_span(prices):
    n = len(prices)
    span = [1] * n  # Initialize span for each day with 1
    stack = []

    for i in range(n):
        # Calculate span for the current day
        while stack and prices[stack[-1]] <= prices[i]:
            stack.pop()
        if stack:
            span[i] = i - stack[-1]
        else:
            span[i] = i + 1  # If no element is greater, span is i + 1
        stack.append(i)

    return span

prices = [100, 80, 60, 70, 60, 75, 85]
print(stock_span(prices))